# MCP Code Analysis Server Configuration Example

# Repository configurations
repositories:
  - url: https://github.com/owner/repo
    branch: main
    # Enable domain-driven analysis for this repository
    enable_domain_analysis: true

# Scanner settings
scanner:
  sync_interval: 300  # seconds
  storage_path: ./repositories
  exclude_patterns:
    - __pycache__
    - "*.pyc"
    - .git
    - venv
    - node_modules
    - .env

# Parser settings
parser:
  languages:
    - python
  chunk_size: 100

# Embeddings configuration
embeddings:
  model: text-embedding-ada-002
  batch_size: 100
  max_tokens: 8000
  generate_interpreted: true

# Domain-driven analysis settings
domain_analysis:
  # Enable domain analysis by default for all repositories
  enabled: false
  # Chunk size for LLM processing
  chunk_size: 1000
  # Overlap between chunks
  chunk_overlap: 200
  # Minimum confidence for entity extraction
  min_confidence: 0.7
  # Maximum entities per file
  max_entities_per_file: 50
  # Leiden algorithm resolution for context detection
  leiden_resolution: 1.0
  # Minimum entities for a bounded context
  min_context_size: 3

# Database configuration
database:
  host: localhost
  port: 5432
  database: code_analysis
  user: codeanalyzer
  # Password is loaded from POSTGRES_PASSWORD env var

# MCP server configuration
mcp:
  host: 0.0.0.0
  port: 8080
  request_timeout: 30

# GitHub integration
github:
  api_rate_limit: 5000
  webhook_endpoint: /webhooks/github

# Query settings
query:
  default_limit: 20
  max_limit: 100
  similarity_threshold: 0.7
  include_context: true
  context_lines: 3

# Logging configuration
logging:
  level: INFO
  format: json
  file_enabled: true
  file_path: logs/mcp-server.log
