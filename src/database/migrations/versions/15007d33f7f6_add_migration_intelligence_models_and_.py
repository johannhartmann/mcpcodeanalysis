"""Add migration intelligence models and fields

Revision ID: 15007d33f7f6
Revises:
Create Date: 2025-07-13 23:18:55.292157

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "15007d33f7f6"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create enum types first
    migration_priority_type = sa.Enum(
        "high", "medium", "low", name="migration_priority_type"
    )
    migration_priority_type.create(op.get_bind())

    op.create_table(
        "migration_patterns",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("category", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.Column("solution", sa.JSON(), nullable=True),
        sa.Column("consequences", sa.JSON(), nullable=True),
        sa.Column("success_rate", sa.Float(), nullable=True),
        sa.Column("avg_effort_hours", sa.Float(), nullable=True),
        sa.Column("applicable_scenarios", sa.JSON(), nullable=True),
        sa.Column("version", sa.String(length=20), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("usage_count", sa.Integer(), nullable=True),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "migration_plans",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("strategy", sa.String(length=50), nullable=False),
        sa.Column("target_architecture", sa.String(length=100), nullable=False),
        sa.Column("risk_tolerance", sa.String(length=20), nullable=False),
        sa.Column("timeline_weeks", sa.Integer(), nullable=True),
        sa.Column("team_size", sa.Integer(), nullable=True),
        sa.Column("total_effort_hours", sa.Float(), nullable=True),
        sa.Column("complexity_score", sa.Float(), nullable=True),
        sa.Column("risk_score", sa.Float(), nullable=True),
        sa.Column("confidence_level", sa.Float(), nullable=True),
        sa.Column("current_phase", sa.String(length=20), nullable=True),
        sa.Column("progress_percentage", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("constraints", sa.JSON(), nullable=True),
        sa.Column("success_metrics", sa.JSON(), nullable=True),
        sa.CheckConstraint(
            "confidence_level >= 0 AND confidence_level <= 1",
            name="check_confidence_level",
        ),
        sa.CheckConstraint(
            "progress_percentage >= 0 AND progress_percentage <= 100",
            name="check_progress_percentage",
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repositories.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "migration_steps",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("plan_id", sa.Integer(), nullable=False),
        sa.Column("sequence_number", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("step_type", sa.String(length=50), nullable=False),
        sa.Column("bounded_context_id", sa.Integer(), nullable=True),
        sa.Column("target_module_id", sa.Integer(), nullable=True),
        sa.Column("target_package_id", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=True),
        sa.Column("estimated_hours", sa.Float(), nullable=True),
        sa.Column("actual_hours", sa.Float(), nullable=True),
        sa.Column("assigned_to", sa.String(length=255), nullable=True),
        sa.Column("validation_criteria", sa.JSON(), nullable=True),
        sa.Column("rollback_procedure", sa.JSON(), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("validated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("prerequisites", sa.JSON(), nullable=True),
        sa.Column("outputs", sa.JSON(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["bounded_context_id"], ["bounded_contexts.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["migration_plans.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["target_module_id"], ["modules.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(
            ["target_package_id"], ["packages.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("plan_id", "sequence_number", name="uq_plan_sequence"),
    )
    op.create_table(
        "migration_decisions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("plan_id", sa.Integer(), nullable=False),
        sa.Column("step_id", sa.Integer(), nullable=True),
        sa.Column("decision_type", sa.String(length=100), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("alternatives_considered", sa.JSON(), nullable=True),
        sa.Column("evaluation_criteria", sa.JSON(), nullable=True),
        sa.Column("rationale", sa.Text(), nullable=False),
        sa.Column("made_by", sa.String(length=255), nullable=True),
        sa.Column(
            "made_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("outcome_assessment", sa.Text(), nullable=True),
        sa.Column("assessed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("success_rating", sa.Integer(), nullable=True),
        sa.CheckConstraint(
            "success_rating >= 1 AND success_rating <= 5", name="check_success_rating"
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["migration_plans.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "migration_dependencies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dependent_step_id", sa.Integer(), nullable=False),
        sa.Column("prerequisite_step_id", sa.Integer(), nullable=False),
        sa.Column("dependency_type", sa.String(length=50), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.CheckConstraint(
            "dependent_step_id != prerequisite_step_id", name="check_no_self_dependency"
        ),
        sa.ForeignKeyConstraint(
            ["dependent_step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["prerequisite_step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "dependent_step_id", "prerequisite_step_id", name="uq_step_dependency"
        ),
    )
    op.create_table(
        "migration_pattern_applications",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("pattern_id", sa.Integer(), nullable=False),
        sa.Column("plan_id", sa.Integer(), nullable=False),
        sa.Column("step_id", sa.Integer(), nullable=True),
        sa.Column(
            "applied_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("success", sa.Integer(), nullable=True),
        sa.Column("modifications", sa.JSON(), nullable=True),
        sa.Column("lessons_learned", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["pattern_id"], ["migration_patterns.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["migration_plans.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "migration_progress",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("step_id", sa.Integer(), nullable=False),
        sa.Column("update_type", sa.String(length=50), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("percentage_complete", sa.Float(), nullable=True),
        sa.Column("metrics", sa.JSON(), nullable=True),
        sa.Column("issues_found", sa.JSON(), nullable=True),
        sa.Column(
            "recorded_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("recorded_by", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "migration_quality_metrics",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("plan_id", sa.Integer(), nullable=False),
        sa.Column("step_id", sa.Integer(), nullable=True),
        sa.Column("metric_type", sa.String(length=100), nullable=False),
        sa.Column("metric_name", sa.String(length=255), nullable=False),
        sa.Column("baseline_value", sa.Float(), nullable=True),
        sa.Column("current_value", sa.Float(), nullable=False),
        sa.Column("target_value", sa.Float(), nullable=True),
        sa.Column("trend", sa.String(length=20), nullable=True),
        sa.Column("within_threshold", sa.Integer(), nullable=True),
        sa.Column(
            "measured_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["migration_plans.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "migration_resource_requirements",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("plan_id", sa.Integer(), nullable=True),
        sa.Column("step_id", sa.Integer(), nullable=True),
        sa.Column("resource_type", sa.String(length=50), nullable=False),
        sa.Column("skill_level", sa.String(length=50), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("start_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("end_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("specific_skills", sa.JSON(), nullable=True),
        sa.Column("tools_required", sa.JSON(), nullable=True),
        sa.CheckConstraint(
            "plan_id IS NOT NULL OR step_id IS NOT NULL",
            name="check_resource_association",
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["migration_plans.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "migration_risks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("plan_id", sa.Integer(), nullable=True),
        sa.Column("step_id", sa.Integer(), nullable=True),
        sa.Column("risk_type", sa.String(length=50), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("probability", sa.Float(), nullable=False),
        sa.Column("impact", sa.Float(), nullable=False),
        sa.Column("risk_level", sa.String(length=20), nullable=False),
        sa.Column("mitigation_strategy", sa.Text(), nullable=True),
        sa.Column("contingency_plan", sa.Text(), nullable=True),
        sa.Column("owner", sa.String(length=255), nullable=True),
        sa.Column(
            "identified_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("mitigated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("realized_at", sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint("impact >= 0 AND impact <= 1", name="check_risk_impact"),
        sa.CheckConstraint(
            "plan_id IS NOT NULL OR step_id IS NOT NULL", name="check_risk_association"
        ),
        sa.CheckConstraint(
            "probability >= 0 AND probability <= 1", name="check_risk_probability"
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["migration_plans.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["step_id"], ["migration_steps.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "bounded_contexts",
        sa.Column(
            "migration_priority",
            sa.Enum("high", "medium", "low", name="migration_priority_type"),
            nullable=True,
        ),
    )
    op.add_column(
        "bounded_contexts", sa.Column("migration_complexity", sa.Float(), nullable=True)
    )
    op.add_column(
        "bounded_contexts", sa.Column("migration_readiness", sa.Float(), nullable=True)
    )
    op.add_column(
        "bounded_contexts",
        sa.Column("extraction_strategy", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "bounded_contexts", sa.Column("migration_notes", sa.Text(), nullable=True)
    )
    op.add_column(
        "package_metrics", sa.Column("migration_risk_score", sa.Float(), nullable=True)
    )
    op.add_column(
        "package_metrics", sa.Column("extraction_difficulty", sa.Float(), nullable=True)
    )
    op.add_column(
        "package_metrics", sa.Column("interface_complexity", sa.Float(), nullable=True)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("package_metrics", "interface_complexity")
    op.drop_column("package_metrics", "extraction_difficulty")
    op.drop_column("package_metrics", "migration_risk_score")
    op.drop_column("bounded_contexts", "migration_notes")
    op.drop_column("bounded_contexts", "extraction_strategy")
    op.drop_column("bounded_contexts", "migration_readiness")
    op.drop_column("bounded_contexts", "migration_complexity")
    op.drop_column("bounded_contexts", "migration_priority")
    op.drop_table("migration_risks")
    op.drop_table("migration_resource_requirements")
    op.drop_table("migration_quality_metrics")
    op.drop_table("migration_progress")
    op.drop_table("migration_pattern_applications")
    op.drop_table("migration_dependencies")
    op.drop_table("migration_decisions")
    op.drop_table("migration_steps")
    op.drop_table("migration_plans")
    op.drop_table("migration_patterns")

    # Drop enum types
    migration_priority_type = sa.Enum(
        "high", "medium", "low", name="migration_priority_type"
    )
    migration_priority_type.drop(op.get_bind())
    # ### end Alembic commands ###
